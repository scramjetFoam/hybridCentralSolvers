/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

defaultAdvScheme     Minmod;
defaultAdvSchemeV    MinmodV;

divSchemes
{
    default         none;

   div(phiU_own,U) Gauss $defaultAdvSchemeV;
   div(phiU_nei,U) Gauss $defaultAdvSchemeV;
   div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

   //Volume Fraction Equation
   div(phi,volumeFraction1) Gauss $defaultAdvScheme;
   div(phirb,volumeFraction1) Gauss linear;             //must be always linear

   //Energy equation

   div(phi1_own,T) Gauss $defaultAdvScheme;
   div(phi1_nei,T) Gauss $defaultAdvScheme;

   div(phi1_own,Q) Gauss $defaultAdvScheme;
   div(phi1_nei,Q) Gauss $defaultAdvScheme;

   div(phi2_own,T) Gauss $defaultAdvScheme;
   div(phi2_nei,T) Gauss $defaultAdvScheme;

   div(phi2_own,Q) Gauss $defaultAdvScheme;
   div(phi2_nei,Q) Gauss $defaultAdvScheme;

   div(phi,k) Gauss $defaultAdvScheme;
   div(phi,epsilon) Gauss $defaultAdvScheme;

}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         none;

    flux(U)                       linear;
    flux(HbyA)                    linear;
    interpolate(U)                linear;
    interpolate(nHat)             linear;
    interpolate(rbyA)             linear;
    //
    reconstruct(rho1)             $defaultAdvScheme;
    reconstruct(rho2)             $defaultAdvScheme;
    reconstruct(rho)              $defaultAdvScheme;

    reconstruct(psi1)             $defaultAdvScheme;
    reconstruct(psi2)             $defaultAdvScheme;
    reconstruct(psi)              $defaultAdvScheme;
    reconstruct(U)                $defaultAdvSchemeV;
    reconstruct(p)                $defaultAdvScheme;
    reconstruct(p_rgh)            $defaultAdvScheme;
    reconstruct(rAU)              $defaultAdvScheme;
    reconstruct(volumeFraction1)  $defaultAdvScheme phi; // MUST be upwinded for bounded behaviour

    dotInterpolate(S,U_0) linear;

    interpolate((sigma*interfaceProperties:K)) linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default	none;
    p_rgh;
}

// ************************************************************************* //
